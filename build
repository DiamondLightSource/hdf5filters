PROGRAM=hdf5filters
VERSION=0.4.0
TAR_FILE=hdf5filters-avx2-$VERSION.tar.gz

build()
{
    # Add dependencies to the path, just in case the build system
    # attempts to run binaries like compilers etc from the environment.
    export PATH=$CMAKE_BIN:$PATH
    
    # Check for AVX2 on build server
    grep avx /proc/cpuinfo || echo "No avx found on build server /proc/cpuinfo"
    
    # First build filters/plugins against HDF5 v1.8
    mkdir hdf5_1.8
    pushd hdf5_1.8
	cmake -DHDF5_ROOT=$HDF5_18_PREFIX \
	      -DCMAKE_INSTALL_PREFIX=$TARGET_PREFIX/hdf5_1.8 \
	      -DBLOSC_ROOT_DIR=$BLOSC_PREFIX \
	      -DCMAKE_BUILD_TYPE=Release \
	      ../..
	make VERBOSE=1
	make install
    popd 

    # Second build filters/plugins against HDF5 1.10
    mkdir hdf5_1.10
    pushd hdf5_1.10
	cmake -DHDF5_ROOT=$HDF5_110_PREFIX \
	      -DCMAKE_INSTALL_PREFIX=$TARGET_PREFIX/hdf5_1.10 \
	      -DBLOSC_ROOT_DIR=$BLOSC_PREFIX \
	      -DCMAKE_BUILD_TYPE=Release \
	      ../..
	make VERBOSE=1
	make install
    popd 
    
    # HACK alert: the build server doesnt have AVX2 support so we have
    #             pre-built the plugins on a workstation that *do* have AVX2
    #             support and installed them into the build server as this module
    #             tar-file: hdf5filters-avx2-<version>.tar.gz
    cp -r ../src/avx2* $TARGET_PREFIX/
}

# vim: set filetype=sh:
